{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# filter"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Filters** the data using the ``signal.filtfilt`` function from the ``scipy`` package."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test the parameters\n",
    "\n",
    "-----------------------------"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction:: ANEMO.PreProcessing::PreProcessing.Trial.filter\n",
    "  :noindex:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "source": [
    "<br><br>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "**example of code:** test the parameters of the function to ``the position x of the eye in degrees`` (see :doc:`3.1__PreProcessing_to_deg`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x214.158 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ANEMO\n",
    "\n",
    "PreProcessing = ANEMO.PreProcessing(dirpath='dataANEMO', sub='002')\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Parameters:\n",
    "#------------------------------------------------------------------------------\n",
    "xname = 'xpr_deg' # The position x of the eye in degrees\n",
    "trial = 8 # Number of the trial to be transformed\n",
    "expname = 'sub-002_task-aSPEM' # Name of the particular experience to be\n",
    "                               # transformed\n",
    "                               # or list(PreProcessing.data.keys())[0]\n",
    "order_filter = 2 # The order of the filter\n",
    "type_filter = 'lowpass' # The type of filter\n",
    "cutoff = 30 # The critical frequencies for cutoff of filter\n",
    "sample_rate = 1000 # Sampling rate of the recording\n",
    "toxname = None # Name of the data to be saved\n",
    "return_ = True # If True returns the value, else saves it in data\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to apply the function:\n",
    "#------------------------------------------------------------------------------\n",
    "xpr_deg_f = PreProcessing.Trial.filter(xname,\n",
    "                                       trial,\n",
    "                                       expname,\n",
    "                                       order_filter,\n",
    "                                       type_filter,\n",
    "                                       cutoff,\n",
    "                                       sample_rate,\n",
    "                                       toxname,\n",
    "                                       return_)\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to retrieve the raw data:\n",
    "#------------------------------------------------------------------------------\n",
    "data_exp = PreProcessing.data[expname]\n",
    "data = data_exp.Data\n",
    "xpr_deg = data[data.trial==trial][xname].values\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Plot:\n",
    "#------------------------------------------------------------------------------\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(10, 10/(1.681*2)))\n",
    "\n",
    "axs[0].plot(xpr_deg, 'k', alpha=.7)\n",
    "axs[0].set_title('the position of the eye in degrees: xpr_deg')\n",
    "axs[0].set_xlabel('time (ms)')\n",
    "axs[0].set_ylabel('position of the eye (°)')\n",
    "\n",
    "axs[1].plot(xpr_deg_f, 'k', alpha=.7)\n",
    "axs[1].set_title('the filtered position of the eye in degrees: xpr_deg_f')\n",
    "axs[1].set_xlabel('time (ms)')\n",
    "axs[1].set_ylabel('position of the eye (°)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "source": [
    "<br><br>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "**example of code:** test the parameters of the function to ``the velocity x of the eye in deg/sec`` (see :doc:`3.2__PreProcessing_to_velocity_deg`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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dizLli3j0UcfZciQIUydOpU6deqQnp4OWNHEmTNnMmLECJ5++mkfwemI5A8//JAePXrwyy+/MHToUAYNGgRYwumuu+7ivffe46GHHuKZZ55xt/3ll19YvXo1kydPZvHixfz555/897//dQVyvXr1MMa4NWtzcnLIzs4GYPLkye5+nI5iubm5fPXVV5SWlvL9998zePBgAGbOnMnkyZPZsmULH3/8sVuay2HChAlccskldO/enXfffZf777+fXr16sWfPHh/BMWHCBK6//nr+85//MHv2bB8btm7dyu23386GDRvcecOHD2fw4MHu26sjIufOncvNN9/MlClTWLNmDXl5efTt25eVK1cydepU126AIUOGsHv3br788ks3WrBixQpuu+02Bg0axLBhw1wxNWDAAIYNGxawPq6Tgzty5Ej69u1Lbm6uT+pMnz59+Omnn8jPz+fHH390e0cPGzYsaM3g1NRUnxxk73oZGRkcddRRtG3bFtjnyGBfywTAZZdd5k47zv+mm24CLPHbpUsXXnvtNXe9zMxMn/NTq1YtunbtClidm5xqGIFylR169+7t5teD9YI5bNgwzjrrrDLrHnHEETRr1oyMjAyuvfbaMsvHjRtHVlaWu60zUIg3shOsY0wwNm7c6A5UUlmR8tBDDwX9vaqImPTN8UBeXp7bypKWlhYVgeyNWqtAji0KCgrcZzLse+45vnrbtm00bNiQpKQkWrVqxb333ku/fv3o2LEjIkLnzp3dANnSpUvp27cvS5Ys4cILLyQpKYk6derwwAMPcNhhh7Fnzx4mT55Mr1696NmzpxucGzFiBLt27eLee++lsLCQd955h61bt/LZZ58xd+5c/vjjD/Ly8tizZw9Lly4lNzeXgoIC3n33XcBqyfSmha1du5bRo0dz++23c/XVV/Pmm28CVonQW2+9lbvuuovevXszZswYN5iTn5/vBnocP+6fYvHLL78AcMEFF3D55Zczc+ZMxo8f71NONNYJ+tQwxowERorIHcaYF4KtF0nsHtv/Bc4BNgDzRWSaMebnqjrGJ598wsSJE2nfvj2bN29m9erVXHzxxfzwww8cdZRVk9/bdDtz5ky39z5YvfaTk5NZtmwZ8+fPd8VkWloa3bp1Y/r06QB89dVXPhErgPvvv9/nc/369d0He3Fxsdt84x/dnDFjBtu2bXPnDxs2zG0e/uabb6hRowa///67W15r+fLl5OTk8NlnnzFhwoQy5yA/P98Vbk5+0axZs5gyZQpXXeXbMf7ll1/mww8/pFu3bj7fyynB5WXixIk+UdDnnnuOzp07k56ezttvv+3Of/31193pK6+8ErAcUZcuXdxOUl4Bevvtt7N27VqaNGnCpk2buO2222jevDmlpaVuDvE111zDuHHjmDFjhusowBJm48ePdz/379+/jN3z5s3jn//8J2A5wtLSUp577jl3uVPfF3Df5q+//nq6dOnCV199RevWrXnuuefc39IRXr169aJWrVrutuvWrWPgwIEVpnWcd955bqQ+LS3NdUjGGJ+Hq+PInWN4O+R169aNHTt2cNZZZ7llemDf7127dm33WgVLUN9www1kZWVx+OGHU6tWLTIyMjj33HN9bEtKSiIrK4tp06YhIlx55ZVcfPHFAAwaNIiHH36YFi1acNZZZ7nXwvHHH0+DBg1o2LAhRx99NP369eOGG25wxcHw4cMREbezxxtvvOET0cjIyGDMmDHuw8rJC/RGSW688UZ2796NiLhl3aZPn0737t3LPddeLrnkkpAGLwErutKyZcuQ910ZYtE3xwv5+fnu/RAtgeyko9WtW1cFcoxRUFDgdkqDfQLZGcVzx44dPn7WaYlzOP300/nkk0/46KOPeOutt6hTpw433HCD6yMBOnToQIcOHQBYs2YNCxcuZM6cOQwePJj69euzdetW/vOf/3DGGWfw448/MnXqVGbMmFEmKuz4zIyMDA499FB27tzJ8OHDefbZZ/nss88466yzWLx4MYMGDSIpKYmjjz6a+vXrM2nSJNasWcO8efNo3rw5PXv2ZNGiRXz88cfuMT744APXRqc10V8gr1ixgqysLLKysrj22mvZsWMHU6ZMYdq0aQwcOJBOnTod8O8RboIKZBH5uzFmFvCniFzmv9wY815YLQtMZ2CVMWY1gIhMBnoAVSaQa9asSU5Ojk8z+bRp0wDKNI0H4umnnw44v6ioyEdwhEK9evXcG7C4uNinIoA/XtHs7eTx5JNPlll3165dASNx3uXORV6vXj3AEsIAo0aN8ln3ww8/BKze+5XF/+WiPEpKSspUEHBwhix2atMCPlFkh969e1faRn9GjBgR8rrOC5DzkhWIQINlOOc6EJ06daJPnz58/fXX7Nq1i7S0NDdSWlpa6vPS5Qjku+++m5kzZ3LIIYe4y1JSUnwivB07dmTt2rXu9RYMr6CcOHGi6xS7dOnCzJkzOfroo4F95c9EhKFDh1JSUkLHjh2ZMmWKm9/srNOzZ88yvZyHDx9O79693eZu7/rPP/8869atY+zYsezYsYOMjAyfCLEjkIuKirjkkkvIzMzk3HPPdY9bv379SlfvOPzww7nxxhtjQiDHqG+OC/Ly8ty63Onp6VHJQXYEcvPmzVUgxxiBcpBhXwR5+/btPn7Wn6OPPpp69eoxbtw4atWqxeOPP+7TsudPq1ataNWqFeeddx6vvvoqW7du5Y477nDF5XXXXceGDRuoU6cOvXr1ori4mOzsbNatW0dhYSHt2rXj888/54cffqB79+4ceeSRdOvWjfHjxzN9+nTGjx9Ps2bNGDx4MHXr1qW4uJinnnqKuXPnctJJJ9GvXz9q1qxJ9+7dKSkpITc3lw0bNjBs2DA+/fRTWrVq5ba4+Ocgb9iwwRXPIsKdd95J165dGTVqFGPGjOHFF18MqbrF6tWrWblyJaeffnqFfWiqmvLaHc/EKh8UKMRigGg44WaAN3t9A3CS/0oicgtwC1Dph1SXLl3YunUrr7322gGYeWAkJSVRWlpKo0aNfC667OxsLr300jLDBE+aNIlrrrmmyo5fWlrqk2IRSU466aQK83/POOOMgJ3d4plzzjmH+vXr87e//c1nfmpqqvsQX7JkiU8pNWeQmbp16/qkUQTCKUdUGbwd+Tp16sTUqVPdB4aXY445JuA23jx3fxo1auS+mPrjPDTatm3LkiVL3HvEITk5mT179mCMoVatWm4rhMPZZ58dcL+9e/fmzDPP5M8//2Tz5s1kZ2dz+OGHM2jQIFe0PPjgg9StW5fnn38+4EuYQ5hrmcaib44Ldu7cyWGHHQZY12o0moOd+7lZs2YhjeqoRI78/HyfVj9vBBms4NRxxx0XdPvk5GTuuusupk2bxhVXXFGuOPZSq1Yt7rzzzjLz69Wrx/Dhw33mtWnThlNPPdX9fPLJJ/sI+7PPPptJkybxyiuv0KpVK1ccgxU4GTBgADk5OdSrV89HwCYnJ9OgQQMaNGjA8OHDee2117jkkkvc5d4cZGMMf/75p4/vFxGOPvpoLr/8cp5//nlWr17t3msLFixgxowZ9OrVi9atW7vbbNq0iXvuuYeioiImTJhAz549OffccyudMre/BM1BNsY8Yv+/IcDfgYfi9o9ArxtlnurGmFeMMScYY07w5jmGymWXXcaECRO49NJLQ1r/rrvucgu7O6OTAVx00UU+EcdQoo8jRozgxRdf5IILLqBHjx7uw9+J6tauXZt+/fpx9913M23aNKZOnUpmZiZNmjThqKOOol+/fu6+Bg8ezJlnnumz/8mTJ1O7dm030heIpKSkMikWwTj//PM5/PDDfeadeuqpTJs2LeSb34u/sDjrrLN8akKeccYZ3Hvvva6Tco7xwQcfMGHCBIYOHerzGwD8979WWmbnzp2ZPHkyU6ZMKdeGV199lSlTprjpA2lpaT6ld4YPH851113nfr7kkkt46aWXeOqppzjttNN89tW7d28GDhwIWKkA3uiDF+f68R6jZ8+e7uc77riDa6+9lhYtWvisl5KS4opSb+93qLhihRcRCShuK0Nlt3d+Q+8Dx9+m8iIMTZo0cVN7vKSkpLiC1l88+zN8+HD69+/P1KlTufTSS2nQoAHHHHMM55xzDj179qRNmzbAvsj5ySefzJFHHunm93ttcfKyDznkEDfvOxzEqG+u9pSUlLBjxw63Y3Q0UyxSU1Np3LgxO3fujNpofoovRUVFFBQU+Dyj/CsI7dq1q8LWqeOPP57HHnus3GdwVeN97tStW5ehQ4dyyy238MQTT5R5xosI9evXL9f3tmjRgocffthNswBLQIsIe/fuZfv27RQWFtK0adk+wyeffDJJSUluK31BQQEjRoxg/vz5/Pe///UJ1Hz00UeUlpYycOBAWrZsyejRo+nfv79b5WPnzp1uGms4CGWgkKHAcGNMjv25PtDfGDMwbFYFZwPgVQjNgbAUqq1Xrx69e/dm0aJF5Ofn06VLF7Kysti5cydpaWk+ubuNGjXi6KOP5q233qJmzZqUlpaSlJTkdlxq1aoV6enptG3blrp16wbsddq/f3+2b99OmzZtEBFuu+02wEr6h33ip1atWj4dmZyL+IUXXiA5OdknqnXQQQfRr18/VqxYwebNm+natSu1atXijTfeQETo0aMHAI8//jh5eXksX76cjz76iNTU1IAR5HvuuadMbvGll17KTz/9xMqVK7n88suZMmUKNWvWREQqbK4HaN++PXfeeSdDhw5l3bp1ZGZmMnbsWD744ANSU1O56qqrSEtL48MPP+TVV191O5E53/vhhx+madOm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li1bui/+ToqFt/52cXExzz//PGlpadx3330MGjSIp556KmCupb+te/fu9QkqLFmyhGeeeYaUlBRGjBjhNt07Ajk9PZ3MzMz9EsjGGL766ivq1atXoWgoKCjg1VdfJTc3l6uvvppDDz004Hrr169n48aNHHPMMaSnp5OUlERRURF5eXnUr1/fJ5iyd+9ePv30U2rVqsWZZ55JUlISe/bsIT8/P2iz+/z58xkxYgT5+flkZGRw++23c8opp1BSUuLj+zds2OA+n9atW8eXX35Jy5YtueKKK4I+H3Nzc8nJyaGoqIhDDjmEtLQ01qxZw9tvv027du246KKLSE5O5o033uCdd95xt6tVqxbXXnstv//+u9v/JNBAISUlJa5ADvczOpZxIsjbt2+vsKNfp06dAtZCbtmyZaWqj6WlpXH22Wczbdo0Nm3aVKXpSKGGm34EUrGiFMGL8SphITU11W3e8Y6AFg6cmz8/P98VGqFW81Cig/M7qUC28J6DBHipioRvDnv9+czMTPr378+DDz7I4MGD6dOnDwcffDCFhYWsXbuWVatWsWnTJlq2bOkOVDN69Gjmz58PwBtvvMENN9zAWWedxYoVK5g0aRK5ubmcdtppHHnkkeTl5VGzZk1+//13Fi1axOGHH067du1YuXIlxhgaNGjAkiVLuPzyy12bHDHrlK2aO3cuXbt2dYMFjz32GHfffTf/93//R8OGDTnppJP4+9//zuTJk2ncuDH//Oc/SU9PJzs7m8cee4yNGzfSvXt3unfvzrx58xg7diyZmZls376dWbNmuX62sLDQTR3Lysoq00vfGMPKlStZuHAhderUITk5mTZt2lBaWsqECRPIy8tDRNyBoW6++eagddjz8vJ45JFHWLVqFenp6cybN4/GjRuTnJxM/fr1ueyyyzjxxBOZN28eQ4cO9akw4I2wJycn07RpUy6//HJOO+00hg4d6tbt//DDD2nXrh1ffPEFe/bsoUOHDlx99dUcddRR7N27l2+++YbZs2ezePFiWrduTf/+/Xnrrbd8xhQ488wzOeKII5g9ezYrV670+Q4NGjRg0aJFfPHFF9x8880ceuihzJo1i19//ZXjjz+ekpIS3nnnHbfjeVZWFmeeeSYzZsygoKCAr7/+mrlz59K5c2feeecdzjnnHG655RbWr19PixYtyMjIoLS0lNmzZ7uDhTn4R5CTkpJCermLV5wc5J07d0Y01aRHjx589tlnPPvsszz55JNVloscShWLK4GngDlYZdZeEJF7jDHvlruhUmU4uXAZGRlhf+AHiiArsY03gry/0fl4whtBjueHVQR9c9jrz4NVL7tv376MGjWKW265hVq1avkMpJOSkuIzNHtqaio333wzbdu2ZezYsTz77LO89tpr5OTkULduXQ4++OCAI4U2adKEZcuWUVpa6hMBbNKkiVvZB/YJ5MLCQv744w8KCwt9OuY2adKExx9/nClTppCbm8u7777Lu+++6w51Pn/+fK688kpeffVVCgoKOP744/nggw/cOvYnnngid999N/369WP58uWuQC4oKHAHK2ndujU//PADpaWlZGdn88orr7B06VK3Sos/DRo0oGXLlmzbto0bb7yRX375hTFjxmCMoUePHuTm5jJp0iQ2b95McXExa9euZffu3QwcOJAjjzySd955h+3bt1NSUsLq1asZNGgQnTp1Yvny5bRp04brrruOpUuXkpqayu7du8nMzHQ7Ci9evJjnnnuOUaNGUVJSwp133klaWhovv/wyv/32G2eccQYtW7Zk+vTp3H///TRq1IiCggLy8vJo0qQJV199Nf/4xz9IS0ujY8eOfP3112zdupWcnBxmzJjBl19+SYsWLbj55ptp3rw5RUVFZGZm0r59e9auXcuoUaPcUqpJSUk0a9bMLc956qmnctppp1FaWsoHH3zAlClTOPzww7n//vtZvnw5o0aN4ueff6Z9+/bcdtttpKam+uSXe6tSefF20nNGYYz16kHhxHlp2rFjR7kDplQ1DRs2pH///lV+/kOJID8InGiMyQYQkUbAF4AK5AjhCNVIiB+vQNZ81uqB46QLCgoOuJk5HvA29cazQCZyvjnk+vPAKwAnnHBC5UadsenatSsdOnRg3rx5rFu3joYNG9KqVStat25No0aN2LRpEytWrGDbtm2ccsopbr7w008/zaxZs5g1axbdu3fn4osvJiMjg02bNpGdnU2dOnXYsWMHTZo0oUmTJuTm5rJ582Zatmzplsds2bJlmY7DYKV/OMPJ+3fKa926Nffccw9gpQj8/PPPXHjhhaxdu5ZnnnmG4cOH06BBA5544glatWrF+vXrWbx4MQ0aNODUU09FRGjTpg0//7wvGO8d1KFTp07MnDmT6dOnM3XqVHbv3k3X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\n",
      "text/plain": [
       "<Figure size 720x214.158 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ANEMO\n",
    "\n",
    "PreProcessing = ANEMO.PreProcessing(dirpath='dataANEMO', sub='002')\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Parameters:\n",
    "#------------------------------------------------------------------------------\n",
    "xname = 'xpr_vdeg' # The velocity x of the eye in deg/sec\n",
    "trial = 8 # Number of the trial to be transformed\n",
    "expname = 'sub-002_task-aSPEM' # Name of the particular experience to be\n",
    "                               # transformed\n",
    "                               # or list(PreProcessing.data.keys())[0] \n",
    "order_filter = 2 # The order of the filter\n",
    "type_filter = 'lowpass' # The type of filter\n",
    "cutoff = 30 # The critical frequencies for cutoff of filter\n",
    "sample_rate = 1000 # Sampling rate of the recording\n",
    "toxname = None # Name of the data to be saved\n",
    "return_ = True # If True returns the value, else saves it in data\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to apply the function:\n",
    "#------------------------------------------------------------------------------\n",
    "xpr_vdeg_f = PreProcessing.Trial.filter(xname,\n",
    "                                        trial,\n",
    "                                        expname,\n",
    "                                        order_filter,\n",
    "                                        type_filter,\n",
    "                                        cutoff,\n",
    "                                        sample_rate,\n",
    "                                        toxname,\n",
    "                                        return_)\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to retrieve the raw data:\n",
    "#------------------------------------------------------------------------------\n",
    "data_exp = PreProcessing.data[expname]\n",
    "data = data_exp.Data\n",
    "xpr_vdeg = data[data.trial==trial][xname].values\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Plot:\n",
    "#------------------------------------------------------------------------------\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(10, 10/(1.681*2)))\n",
    "\n",
    "axs[0].plot(xpr_vdeg, 'k', alpha=.7)\n",
    "axs[0].set_title('the velocity of the eye in °/s: xpr_vdeg')\n",
    "axs[0].set_xlabel('time (ms)')\n",
    "axs[0].set_ylabel('velocity of the eye (°/s)')\n",
    "\n",
    "axs[1].plot(xpr_vdeg_f, 'k', alpha=.7)\n",
    "axs[1].set_title('the filtered velocity of the eye in °/s: xpr_vdeg_f')\n",
    "axs[1].set_xlabel('time (ms)')\n",
    "axs[1].set_ylabel('velocity of the eye (°/s)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run it on a data set\n",
    "\n",
    "----------------------------"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction:: ANEMO.PreProcessing::PreProcessing.Data.filter\n",
    "  :noindex:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "source": [
    "<br><br>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "**example of code:** run this function on ``the full data of position x of the eye in degret`` (see :doc:`3.1__PreProcessing_to_deg`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calculates xpr_deg_f from the file sub-002_task-aSPEM... finished\n"
     ]
    }
   ],
   "source": [
    "import ANEMO\n",
    "\n",
    "PreProcessing = ANEMO.PreProcessing(dirpath='dataANEMO', sub='002')\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Parameters:\n",
    "#------------------------------------------------------------------------------\n",
    "xname = 'xpr_deg' # The position x of the eye in degret\n",
    "order_filter = 2 # The order of the filter\n",
    "type_filter = 'lowpass' # The type of filter\n",
    "cutoff = 30 # The critical frequencies for cutoff of filter\n",
    "sample_rate = 1000 # Sampling rate of the recording\n",
    "toxname= None # Name of the data to be saved,\n",
    "              # If None toxname will take the value xname+'_deg'\n",
    "expnames = 'sub-002_task-aSPEM' # Name of the particular experience to be\n",
    "                                # transformed\n",
    "                                # or list(PreProcessing.data.keys())[0]  \n",
    "trials = list(range(1, 16)) # List of the trial to be transformed\n",
    "recalculate = False # Allows you to indicate if you want to force the\n",
    "                    # calculation on the trials already processed\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to apply the function:\n",
    "#------------------------------------------------------------------------------\n",
    "PreProcessing.Data.filter(xname,\n",
    "                          order_filter,\n",
    "                          type_filter,\n",
    "                          cutoff,\n",
    "                          sample_rate,\n",
    "                          toxname,\n",
    "                          expnames,\n",
    "                          trials,\n",
    "                          recalculate)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "source": [
    "<br><br>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "**example of code:** run this function on ``the full data of velocity of the eye in deg/sec`` (see :doc:`3.2__PreProcessing_to_velocity_deg`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calculates xpr_vdeg_f from the file sub-002_task-aSPEM... finished\n"
     ]
    }
   ],
   "source": [
    "import ANEMO\n",
    "\n",
    "PreProcessing = ANEMO.PreProcessing(dirpath='dataANEMO', sub='002')\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Parameters:\n",
    "#------------------------------------------------------------------------------\n",
    "xname = 'xpr_vdeg' # The velocity x of the eye in deg/sec\n",
    "order_filter = 2 # The order of the filter\n",
    "type_filter = 'lowpass' # The type of filter\n",
    "cutoff = 30 # The critical frequencies for cutoff of filter\n",
    "sample_rate = 1000 # Sampling rate of the recording\n",
    "toxname= None # Name of the data to be saved,\n",
    "              # If None toxname will take the value xname+'_deg'\n",
    "expnames = 'sub-002_task-aSPEM' # Name of the particular experience to be\n",
    "                                # transformed\n",
    "                                # or list(PreProcessing.data.keys())[0] \n",
    "trials = list(range(1, 16)) # List of the trial to be transformed\n",
    "recalculate = False # Allows you to indicate if you want to force the\n",
    "                    # calculation on the trials already processed\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# to apply the function:\n",
    "#------------------------------------------------------------------------------\n",
    "PreProcessing.Data.filter(xname,\n",
    "                          order_filter,\n",
    "                          type_filter,\n",
    "                          cutoff,\n",
    "                          sample_rate,\n",
    "                          toxname,\n",
    "                          expnames,\n",
    "                          trials,\n",
    "                          recalculate)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Format de la Cellule Texte Brut",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
